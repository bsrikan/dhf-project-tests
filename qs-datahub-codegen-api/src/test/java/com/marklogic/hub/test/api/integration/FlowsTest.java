/*
 * QuickStart DataHub API
 * This is a sample of a QuickStart DataHub Swagger doucment defining endpoints to be mocked
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.marklogic.hub.test.api.integration;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.json.JSONObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.TestFactory;

import com.google.gson.Gson;
import com.marklogic.hub.client.model.Flow;
import com.marklogic.hub.test.api.utils.TestsHelper;

/**
 * API tests for FlowsApi
 */
public class FlowsTest extends TestsHelper {

    @TestFactory
    public List<DynamicTest> generateCreateFlowTests() {
        List<DynamicTest> tests = new ArrayList<>();
        String testType = "flow";
        File flowDirectory = new File("src/test/resources/input/flow");
        File[] listOfFiles = flowDirectory.listFiles();
        int fileCount = listOfFiles.length;
        allCombos((s) -> {
            if (s.equals("2xx")) {
                for (int i = 0; i < fileCount; i++) {
                    String fileName = listOfFiles[i].getName();
                    if (listOfFiles[i].getName().contains("create-2xx")) {
                        tests.add(DynamicTest.dynamicTest(testType + "-" + fileName, () -> {
                            String response = createFlowTestResponse(fileName, testType);
                            assert (response.equals("200 OK"));
                        }));
                    }
                }
            } else if (s.equals("4xx")) {
                for (int i = 0; i < fileCount; i++) {
                    String fileName = listOfFiles[i].getName();
                    if (listOfFiles[i].getName().contains("create-4xx")) {
                        tests.add(DynamicTest.dynamicTest(listOfFiles[i].getName(), () -> {
                            String response = createFlowTestResponse(fileName, testType);
                            assert (response.equals("400 error"));
                        }));
                    }
                }
            } else {
                // when marklogic is down
                for (int i = 0; i < fileCount; i++) {
                    if (listOfFiles[i].getName().contains("create-5xx")) {
                        String fileName = listOfFiles[i].getName();
                        tests.add(DynamicTest.dynamicTest("2xx", () -> {
                            String response = createFlowTestResponse(fileName, testType);
                            assert (response.equals("500 error"));
                        }));
                    }
                }
            }
        });
        return tests;
    }

    @TestFactory
    @Disabled
    public List<DynamicTest> generateRunFlowTests() {
        return null;
    }

    @TestFactory
    public List<DynamicTest> generateDeleteFlowTests() {
        List<DynamicTest> tests = new ArrayList<>();
        String[] invalidFlowIds = { "test--flow", "", null };
        String validFlowId = "flow-04";
        allCombos((s) -> {
            if (s.equals("4xx")) {
                for (String id : invalidFlowIds) {
                    tests.add(DynamicTest.dynamicTest("delete-4xx-flow with flowID: " + id, () -> {
                        String response = deleteFlowTestResponse(id);
                        assert (response.equals("400 error"));
                    }));
                }
            } else if (s.equals("2xx")) {
                tests.add(DynamicTest.dynamicTest("delete-2xx-flow with flowID: " + validFlowId, () -> {
                    String response = deleteFlowTestResponse(validFlowId);
                    assert (response.equals("200 OK"));
                }));
            }
        });
        return tests;
    }

    @TestFactory
    public List<DynamicTest> generateGetFlowTests() {
        List<DynamicTest> tests = new ArrayList<>();
        String[] invalidFlowIds = { "test--flow", " ", null };
        String validFlowId = "flow-03";

        allCombos((s) -> {
            if (s.equals("4xx")) {
                for (String id : invalidFlowIds) {
                    tests.add(DynamicTest.dynamicTest("get-4xx-flow with flowID: " + id, () -> {
                        String response = getFlowTestResponse(id);
                        assert (response.equals("400 error"));
                    }));
                }
            } else if (s.equals("2xx")) {
                tests.add(DynamicTest.dynamicTest("get-2xx-flow with flowID: " + validFlowId, () -> {
                    String response = getFlowTestResponse(validFlowId);
                    assert (response.equals("200 OK"));
                }));
            }
        });
        return tests;
    }

    @TestFactory
    public List<DynamicTest> generateGetFlowsTests() {
        List<DynamicTest> tests = new ArrayList<>();
        String testType = "flow";
        allCombos((s) -> {
            if (s.equals("2xx")) {
                tests.add(DynamicTest.dynamicTest(testType, () -> {
                    String response = getFlowsTestResponse();
                    assert (response.equals("200 OK"));
                }));
            }
        });
        return tests;
    }

    @TestFactory
    public List<DynamicTest> generateUpdateFlowTests() {
        List<DynamicTest> tests = new ArrayList<>();
        String[] invalidFlowIds = { "test--flow", " ", null };
        String validFlowId = "flow-02";
        String testType = "flow";
        File flowDirectory = new File("src/test/resources/input/flow");
        File[] listOfFiles = flowDirectory.listFiles();
        int fileCount = listOfFiles.length;

        allCombos((s) -> {
            if (s.equals("4xx")) {
                Flow currFlow = new Flow();
                Gson gson = new Gson();
                String currFlowString = gson.toJson(currFlow);
                for (String id : invalidFlowIds) {
                    tests.add(DynamicTest.dynamicTest("update-4xx-flow with flowID: " + id, () -> {
                        String response = updateFlowTestResponse(id, currFlowString);
                        assert (response.equals("400 error"));
                    }));
                }
            }
        });

        allCombos((s) -> {
            if (s.equals("2xx")) {
                Flow currFlow = flowApi.getFlow(validFlowId);
                Gson gson = new Gson();
                String currFlowString = gson.toJson(currFlow);
                String updateJsonData = getJsonResource("update-2xx-customvalues.json", testType);
                JSONObject jsonObject = new JSONObject(currFlowString);
                JSONObject updateJsonObject = new JSONObject(updateJsonData);
                Iterator<String> keys = updateJsonObject.keys();

                while (keys.hasNext()) {
                    String key = keys.next();
                    tests.add(DynamicTest.dynamicTest("update-2xx-flow with flowID: " + validFlowId + " " + key, () -> {
                        jsonObject.put(key, updateJsonObject.get(key));
                        String response = updateFlowTestResponse(validFlowId, jsonObject.toString());
                        assert (response.equals("200 OK"));
                    }));
                }
            } else if (s.equals("4xx")) {
                for (int i = 0; i < fileCount; i++) {
                    String fileName = listOfFiles[i].getName();
                    if (listOfFiles[i].getName().contains("update-4xx")) {
                        tests.add(DynamicTest.dynamicTest(listOfFiles[i].getName(), () -> {
                            String response = updateFlowTestResponse4xx(fileName, testType, validFlowId);
                            assert (response.equals("400 error"));
                        }));
                    }
                }
            }
        });

        return tests;
    }
}
