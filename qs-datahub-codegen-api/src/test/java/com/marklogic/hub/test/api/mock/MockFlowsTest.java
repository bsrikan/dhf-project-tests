/*
 * QuickStart DataHub API
 * This is a sample of a QuickStart DataHub Swagger doucment defining endpoints to be mocked
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.marklogic.hub.test.api.mock;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestFactory;
import org.springframework.web.client.RestClientException;

import com.marklogic.hub.client.api.FlowsApi;
import com.marklogic.hub.client.invoker.ApiClient;
import com.marklogic.hub.client.model.Flow;

/**
 * API tests for FlowsApi
 */
public class MockFlowsTest {

    private static final FlowsApi api = new FlowsApi();
    private static ApiClient apiClient = api.getApiClient();
    private static final Logger log = Logger.getLogger(MockFlowsTest.class.getName());

    @BeforeAll
    public static void setUp() throws Exception {
        log.info("here");
        apiClient.setBasePath("http://localhost:4201/api");
    }
    
    @TestFactory
    public List<DynamicTest> generateHasASpaceTests() {
        List<DynamicTest> tests = new ArrayList<>();
        
        return tests;
    }

    /**
     * Create flow
     *
     * 
     *
     * @throws ApiException
     *             if the Api call fails
     */
    @Test
    public void createFlowTest() {
        Flow body = null;
        Flow response = api.createFlow(body);

        // TODO: test validations
    }

    /**
     * Delete flow by Id
     *
     * 
     *
     * @throws ApiException
     *             if the Api call fails
     */
    @Test
    public void deleteFlowTest() {
        String flowId = "1";
        api.deleteFlow(flowId);

        // TODO: test validations
    }

    /**
     * Find flow by Id
     *
     * ....
     *
     * @throws ApiException
     *             if the Api call fails
     */
    @Test
    public void getFlowTest() {
        String flowId = null;
        Flow response = api.getFlow(flowId);

        // TODO: test validations
//        try {
//            response = api.getFlow(flowId);
//            assert(!response.equals(null));
//        } catch (RestClientException e) {
//            log.info(apiClient.getBasePath());
//            log.info(e.getMessage());
//            assert(e.getMessage().contains("400"));
//        }
    }

    /**
     * Returns all flows
     *
     * Returns all flows
     *
     * @throws ApiException
     *             if the Api call fails
     */
    @Test
    public void getFlowsTest() {
        List<Flow> response = api.getFlows();

        // TODO: test validations
    }

    /**
     * Run a Flow
     *
     * 
     *
     * @throws ApiException
     *             if the Api call fails
     */
//    @Test
//    public void runFlowTest() {
//        String flowId = null;
//        Step response = api.runFlow(flowId);
//
//        // TODO: test validations
//    }

    /**
     * Update flow by Id
     *
     * 
     *
     * @throws ApiException
     *             if the Api call fails
     */
    @Test
    public void updateFlowTest() {
        String flowId = "1234";
        Flow body = null;
        api.updateFlow(flowId, body);

        // TODO: test validations
    }

}
