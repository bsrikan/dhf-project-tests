/*
 * QuickStart DataHub API
 * This is a sample of a QuickStart DataHub Swagger doucment defining endpoints to be mocked
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.marklogic.hub.test.api.integration;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;

import org.json.JSONObject;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.TestFactory;

import com.google.gson.Gson;
import com.marklogic.hub.client.model.Step;
import com.marklogic.hub.test.api.utils.TestsHelper;

/**
 * API tests for FlowsApi
 */
public class StepsTest extends TestsHelper {

    private static final Logger log = Logger.getLogger(StepsTest.class.getName());

    @TestFactory
    public List<DynamicTest> generateCreateFlowStepTest() {
        log.info("generateCreateStepTest");

        List<DynamicTest> tests = new ArrayList<>();
        String[] invalidFlowIds = { "test-flow", "", null };
        String validFlowId = "flow-01";
        String testType = "step";

        File stepDirectory = new File("src/test/resources/input/step");
        File[] listOfFiles = stepDirectory.listFiles();
        int fileCount = listOfFiles.length;

        allCombos((s) -> {
            if (s.equals("4xx")) {
                for (String id : invalidFlowIds) {
                    tests.add(DynamicTest.dynamicTest("4xx-create-step with flowID: " + id, () -> {
                        String response = createFlowStepTestResponse(id, "create-2xx-allvalues.json", testType);
                        assert (response.equals("400 error"));
                    }));
                }
            } else if (s.equals("2xx")) {
                tests.add(DynamicTest.dynamicTest("2xx-create-step with flowID: " + validFlowId, () -> {
                    String response = createFlowStepTestResponse(validFlowId, "create-2xx-allvalues.json", testType);
                    System.out.println(response);
                    assert (response.equals("200 OK"));
                }));
            }
        });

        allCombos((s) -> {
            if (s.equals("2xx")) {
                for (int i = 0; i < fileCount; i++) {
                    String fileName = listOfFiles[i].getName();
                    if (listOfFiles[i].getName().contains("create-2xx")) {
                        tests.add(DynamicTest.dynamicTest(testType + "-" + fileName, () -> {
                            String response = createFlowStepTestResponse(validFlowId, fileName, testType);
                            assert (response.equals("200 OK"));
                        }));
                    }
                }
            } else if (s.equals("4xx")) {
                for (int i = 0; i < fileCount; i++) {
                    String fileName = listOfFiles[i].getName();
                    if (listOfFiles[i].getName().contains("create-4xx")) {
                        tests.add(DynamicTest.dynamicTest(testType + "-" + fileName, () -> {
                            String response = createFlowStepTestResponse(validFlowId, fileName, testType);
                            assert (response.equals("400 error"));
                        }));
                    }
                }
            }
        });
        return tests;
    }

    @TestFactory
    public List<DynamicTest> generateDeleteFlowStepTest() {
        List<DynamicTest> tests = new ArrayList<>();
        String[] invalidFlowIds = { "test-flow", "", null, " " };
        String[] invalidStepIds = { "test--step", "", null, " " };
        String validFlowId = "flow-01";
        String validStepId = "step-1-flow-1";

        allCombos((s) -> {
            if (s.equals("4xx")) {
                for (String flowId : invalidFlowIds) {
                    tests.add(DynamicTest
                            .dynamicTest("delete-4xx-step with flowID: " + flowId + " stepID: " + validStepId, () -> {
                                String response = deleteFlowStepTestResponse(flowId, validStepId);
                                assert (response.equals("400 error"));
                            }));
                }

                for (String stepId : invalidStepIds) {
                    tests.add(DynamicTest
                            .dynamicTest("delete-4xx-step with flowID: " + validFlowId + " stepID: " + stepId, () -> {
                                String response = deleteFlowStepTestResponse(validFlowId, stepId);
                                assert (response.equals("400 error"));
                            }));
                }
            } else if (s.equals("2xx")) {
                tests.add(DynamicTest
                        .dynamicTest("create-2xx-step with flowID: " + validFlowId + " stepID: " + validStepId, () -> {
                            String response = deleteFlowStepTestResponse(validFlowId, validStepId);
                            assert (response.equals("200 OK"));
                        }));
            }
        });
        return tests;
    }

    @TestFactory
    public List<DynamicTest> generateGetFlowStepsTest() {
        List<DynamicTest> tests = new ArrayList<>();
        String[] invalidFlowIds = { "test--flow", "", null, " " };
        String validFlowId = "flow-01";

        allCombos((s) -> {
            if (s.equals("4xx")) {
                for (String id : invalidFlowIds) {
                    tests.add(DynamicTest.dynamicTest("get-4xx-flow-step with flowID: " + id, () -> {
                        String response = getFlowStepsTestResponse(id);
                        assert (response.equals("400 error"));
                    }));
                }
            } else if (s.equals("2xx")) {
                tests.add(DynamicTest.dynamicTest("get-2xx-flow-step with flowID: " + validFlowId, () -> {
                    String response = getFlowStepsTestResponse(validFlowId);
                    assert (response.equals("200 OK"));
                }));
            }
        });
        return tests;
    }

    @TestFactory
    public List<DynamicTest> generateUpdateFlowStepTest() {
        List<DynamicTest> tests = new ArrayList<>();
        String[] invalidFlowIds = { "test-flow", " ", null };
        String validFlowId = "flow-01";
        String[] invalidStepIds = { "test--step", "", " ", null };
        String validStepId = "step-3-flow-1";
        String testType = "step";

        File stepDirectory = new File("src/test/resources/input/step");
        File[] listOfFiles = stepDirectory.listFiles();
        int fileCount = listOfFiles.length;

        allCombos((s) -> {
            if (s.equals("4xx")) {
                Step currStep = new Step();
                Gson gson = new Gson();
                String currStepString = gson.toJson(currStep);

                for (String flowId : invalidFlowIds) {
                    tests.add(DynamicTest
                            .dynamicTest("update-4xx-step with flowID:" + flowId + " stepID:" + validStepId, () -> {
                                String response = updateFlowStepTestResponse(flowId, validStepId, currStepString);
                                assert (response.equals("400 error"));
                            }));
                }

                for (String stepId : invalidStepIds) {
                    tests.add(DynamicTest
                            .dynamicTest("update-4xx-step with flowID:" + validFlowId + " stepID:" + stepId, () -> {
                                String response = updateFlowStepTestResponse(validFlowId, stepId, currStepString);
                                System.out.println(response + " " + stepId);
                                assert (response.equals("400 error"));
                            }));
                }
            }
        });

        allCombos((s) -> {
            if (s.equals("2xx")) {
                for (int i = 0; i < fileCount; i++) {
                    String fileName = listOfFiles[i].getName();
                    if (fileName.contains("update-2xx")) {
                        Step currStep = getFlowStep(validFlowId, validStepId);
                        Gson gson = new Gson();
                        String currStepString = gson.toJson(currStep);
                        String updateJsonData = getJsonResource(fileName, testType);
                        JSONObject jsonObject = new JSONObject(currStepString);
                        JSONObject updateJsonObject = new JSONObject(updateJsonData);
                        Iterator<String> keys = updateJsonObject.keys();

                        while (keys.hasNext()) {
                            String key = keys.next();
                            tests.add(DynamicTest.dynamicTest(
                                    fileName + " with flowID:" + validFlowId + " stepID:" + validStepId + " " + key,
                                    () -> {
                                        jsonObject.put(key, updateJsonObject.get(key));
                                        String response = updateFlowStepTestResponse(validFlowId, validStepId,
                                                jsonObject.toString());
                                        assert (response.equals("200 OK"));
                                    }));
                        }
                    }
                }
            } else if (s.equals("4xx")) {
                for (int i = 0; i < fileCount; i++) {
                    String fileName = listOfFiles[i].getName();
                    if (listOfFiles[i].getName().contains("update-4xx")) {
                        tests.add(DynamicTest.dynamicTest(fileName, () -> {
                            String response = updateFlowStepTestResponse4xx(fileName, testType, validFlowId,
                                    validStepId);
                            assert (response.equals("400 error"));
                        }));
                    }
                }
            }
        });

        return tests;
    }
}
