apply plugin: 'idea'
apply plugin: 'eclipse'

group = 'com.marklogic'
version = '0.0.1-SNAPSHOT'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

repositories {
    jcenter()
    mavenCentral()
}


if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 23
        buildToolsVersion '23.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 22
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies { provided 'javax.annotation:jsr250-api:1.0' }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts { archives sourcesJar }

} else {

    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    install {
        repositories.mavenInstaller { pom.artifactId = 'qs-datahub-codegen-api' }
    }

    task execute(type:JavaExec) {
        main = System.getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }
}

ext {
    swagger_annotations_version = "1.5.17"
    jackson_version = "2.8.9"
    spring_web_version = "4.3.9.RELEASE"
    jodatime_version = "2.9.9"
    junitVersion = "4.12"
    junitJupiterVersion = "5.4.0"
    junitPlatformRunnerVersion = "1.4.0"
    jackson_threeten_version = "2.6.4"
    json_version = "20180813"
}

dependencies {
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile "org.springframework:spring-web:$spring_web_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jackson_version"
    compile "com.github.joschi.jackson:jackson-datatype-threetenbp:$jackson_threeten_version"
    compile "org.json:json:$json_version"
    compile "commons-io:commons-io:2.6"
    compile "com.google.code.gson:gson:2.8.5"
    testRuntime "org.junit.platform:junit-platform-runner:$junitPlatformRunnerVersion"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testCompile("junit:junit:$junitVersion")
    testRuntime("org.junit.vintage:junit-vintage-engine:$junitJupiterVersion")
}

String testEnv = project.hasProperty("testEnv") ? project.property("testEnv") : ""

test {
	dependsOn 'updateClient'
    useJUnitPlatform()
    if(testEnv.equals("mock")) {
        include 'com/marklogic/hub/test/api/integration/*'
    } else {
        include 'com/marklogic/hub/test/api/mock/*'
    }
    
    testLogging {
        // Make test events are logged and standard out or error is shown
        events 'started','passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showStandardStreams = true
    }
}

task fetchSwaggerFile {
    def outputAsString = ""
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'curl'
            args = ['https://raw.githubusercontent.com/marklogic/marklogic-data-hub/develop/web/api/swagger/mocks.json']
            standardOutput = os
        }
        outputAsString = os.toString()
    }
    new File("swagger-latest.json").text = outputAsString
}

task copyLatestSwaggerFile(type: Exec) {
    workingDir '../'
    commandLine 'cp', 'swagger-latest.json', 'qs-datahub-codegen-api/src/test/resources/swagger.json'
}

task updateClient(type: Exec) {
	dependsOn 'copyLatestSwaggerFile'
    workingDir '../'
    commandLine 'java', '-jar', 'qs-datahub-codegen-api/src/test/resources/swagger-codegen-cli-2.4.2.jar',
    'generate', '-i', 'qs-datahub-codegen-api/src/test/resources/swagger.json', '--api-package', 
	'com.marklogic.hub.client.api', '--model-package', 'com.marklogic.hub.client.model', '--invoker-package', 
	'com.marklogic.hub.client.invoker', '--group-id', 'com.marklogic', '--artifact-id', 'qs-datahub-codegen-api', 
	'--artifact-version', '0.0.1-SNAPSHOT', '-l', 'java', '--library', 'resttemplate', '-o', 'qs-datahub-codegen-api'
}
